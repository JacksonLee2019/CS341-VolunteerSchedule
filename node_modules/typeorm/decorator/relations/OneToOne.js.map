{"version":3,"sources":["../../src/decorator/relations/OneToOne.ts"],"names":[],"mappings":";;AACA,qCAAmD;AAkBnD;;;GAGG;AACH,kBAA4B,YAA2C,EAC3C,oBAAkE,EAClE,OAAyB;IACjD,IAAI,mBAAgD,CAAC;IACrD,EAAE,CAAC,CAAC,OAAO,oBAAoB,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC3C,OAAO,GAAqB,oBAAoB,CAAC;IACrD,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,mBAAmB,GAAiC,oBAAoB,CAAC;IAC7E,CAAC;IAED,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QACjD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAqB,CAAC;QAE9C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7D,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAC;YACrD,IAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACxF,EAAE,CAAC,CAAC,aAAa,IAAI,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;gBAC1G,MAAM,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,IAAM,IAAI,GAAyB;YAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,YAAY;YAClB,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AAjCD,4BAiCC","file":"OneToOne.js","sourcesContent":["import {RelationOptions} from \"../options/RelationOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {ObjectType} from \"../../common/ObjectType\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>, options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                            inverseSide?: string|((object: T) => any),\n                            options?: RelationOptions): Function;\n\n/**\n * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.\n * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.\n */\nexport function OneToOne<T>(typeFunction: (type?: any) => ObjectType<T>,\n                            inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                            options?: RelationOptions): Function {\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // now try to determine it its lazy relation\n        let isLazy = options && options.lazy === true ? true : false;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        const args: RelationMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-one\",\n            type: typeFunction,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        };\n        getMetadataArgsStorage().relations.push(args);\n    };\n}"],"sourceRoot":"../.."}