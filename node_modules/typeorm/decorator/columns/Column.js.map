{"version":3,"sources":["../../src/decorator/columns/Column.ts"],"names":[],"mappings":";;AACA,qCAAmD;AA6DnD;;;GAGG;AACH,gBAAuB,aAA2F,EAAE,OAA+C;IAC/J,IAAI,IAA0B,CAAC;IAC/B,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,IAAI,aAAa,YAAY,QAAQ,CAAC,CAAC,CAAC;QACzE,IAAI,GAAgB,aAAa,CAAC;IAEtC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACvB,OAAO,GAAmB,aAAa,CAAC;QACxC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;IAC9B,CAAC;IACD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,EAAE,CAAC,CAAC,aAAa,YAAY,QAAQ,CAAC,CAAC,CAAC;YAEpC,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAE,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACpJ,IAAM,OAAO,GAAG,mBAAmB,KAAK,KAAK,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;YAElI,IAAM,IAAI,GAAyB;gBAC/B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;gBAC5E,IAAI,EAAE,aAAyC;aAClD,CAAC;YACF,8BAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAElD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,uDAAuD;YACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACR,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAE,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACpJ,EAAE,CAAC,CAAC,mBAAmB,CAAC;oBACpB,IAAI,GAAG,mBAAmB,CAAC,CAAC,gDAAgD;YACpF,CAAC;YAED,kEAAkE;YAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;gBAAC,OAAO,GAAG,EAAmB,CAAC;YAE5C,yGAAyG;YACzG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;gBACtB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;YAEtE,4CAA4C;YAC5C,IAAM,IAAI,GAAuB;gBAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;aACnB,CAAC;YACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChD,CAAC;IAEL,CAAC,CAAC;AACN,CAAC;AAnDD,wBAmDC","file":"Column.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {\n    ColumnType,\n    SimpleColumnType,\n    WithLengthColumnType,\n    WithPrecisionColumnType\n} from \"../../driver/types/ColumnTypes\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\nimport {ColumnCommonOptions} from \"../options/ColumnCommonOptions\";\nimport {ColumnWithLengthOptions} from \"../options/ColumnWithLengthOptions\";\nimport {ColumnNumericOptions} from \"../options/ColumnNumericOptions\";\nimport {ColumnEnumOptions} from \"../options/ColumnEnumOptions\";\nimport {ColumnEmbeddedOptions} from \"../options/ColumnEmbeddedOptions\";\nimport {EmbeddedMetadataArgs} from \"../../metadata-args/EmbeddedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this\n * decorator will be persisted to the database when entity be saved.\n */\nexport function Column(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(options: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: SimpleColumnType, options?: ColumnCommonOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithLengthColumnType, options?: ColumnCommonOptions & ColumnWithLengthOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: WithPrecisionColumnType, options?: ColumnCommonOptions & ColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(type: \"enum\", options?: ColumnCommonOptions & ColumnEnumOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n *\n * Property in entity can be marked as Embedded, and on persist all columns from the embedded are mapped to the\n * single table of the entity where Embedded is used. And on hydration all columns which supposed to be in the\n * embedded will be mapped to it from the single table.\n */\nexport function Column(type: (type?: any) => Function, options?: ColumnEmbeddedOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n */\nexport function Column(typeOrOptions?: ((type?: any) => Function)|ColumnType|(ColumnOptions&ColumnEmbeddedOptions), options?: (ColumnOptions&ColumnEmbeddedOptions)): Function {\n    let type: ColumnType|undefined;\n    if (typeof typeOrOptions === \"string\" || typeOrOptions instanceof Function) {\n        type = <ColumnType> typeOrOptions;\n\n    } else if (typeOrOptions) {\n        options = <ColumnOptions> typeOrOptions;\n        type = typeOrOptions.type;\n    }\n    return function (object: Object, propertyName: string) {\n\n        if (typeOrOptions instanceof Function) {\n\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            const isArray = reflectMetadataType === Array || (options && (options.isArray === true || options.array === true)) ? true : false;\n\n            const args: EmbeddedMetadataArgs = {\n                target: object.constructor,\n                propertyName: propertyName,\n                isArray: isArray,\n                prefix: options && options.prefix !== undefined ? options.prefix : undefined,\n                type: typeOrOptions as (type?: any) => Function\n            };\n            getMetadataArgsStorage().embeddeds.push(args);\n\n        } else {\n            // if type is not given implicitly then try to guess it\n            if (!type) {\n                const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n                if (reflectMetadataType)\n                    type = reflectMetadataType; // todo: need to determine later on driver level\n            }\n\n            // if column options are not given then create a new empty options\n            if (!options) options = {} as ColumnOptions;\n\n            // check if there is no type in column options then set type from first function argument, or guessed one\n            if (!options.type && type)\n                options = Object.assign({ type: type } as ColumnOptions, options);\n\n            // create and register a new column metadata\n            const args: ColumnMetadataArgs = {\n                target: object.constructor,\n                propertyName: propertyName,\n                mode: \"regular\",\n                options: options\n            };\n            getMetadataArgsStorage().columns.push(args);\n        }\n\n    };\n}\n"],"sourceRoot":"../.."}