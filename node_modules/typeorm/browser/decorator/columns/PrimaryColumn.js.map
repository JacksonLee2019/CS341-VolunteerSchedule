{"version":3,"sources":["../browser/src/decorator/columns/PrimaryColumn.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,wBAAwB,EAAC,MAAM,sCAAsC,CAAC;AAC9E,OAAO,EAAC,sBAAsB,EAAC,MAAM,aAAa,CAAC;AACnD,OAAO,EAAC,kCAAkC,EAAC,MAAM,gDAAgD,CAAC;AAiBlG;;;;GAIG;AACH,MAAM,wBAAwB,aAAwC,EAAE,OAAuB;IAC3F,IAAI,IAA0B,CAAC;IAC/B,EAAE,CAAC,CAAC,OAAO,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC;QACpC,IAAI,GAAgB,aAAa,CAAC;IACtC,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,OAAO,GAAmB,aAAa,CAAC;IAC5C,CAAC;IACD,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,qHAAqH;QAErH,uDAAuD;QACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACR,IAAM,mBAAmB,GAAG,OAAO,IAAK,OAAe,CAAC,WAAW,CAAC,CAAC,CAAE,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACpJ,EAAE,CAAC,CAAC,mBAAmB,CAAC;gBACpB,IAAI,GAAG,mBAAmB,CAAC;QACnC,CAAC;QAED,kEAAkE;QAClE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;YAAC,OAAO,GAAG,EAAmB,CAAC;QAE5C,yGAAyG;QACzG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC;YACtB,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;QAEtE,yFAAyF;QACzF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;YACd,MAAM,IAAI,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAE7D,wFAAwF;QACxF,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;YACjB,MAAM,IAAI,kCAAkC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAEvE,6CAA6C;QAC7C,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAmB,EAAE,OAAO,CAAC,CAAC;QAErE,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC","file":"PrimaryColumn.js","sourcesContent":["import {ColumnOptions} from \"../options/ColumnOptions\";\nimport {ColumnType} from \"../../driver/types/ColumnTypes\";\nimport {ColumnTypeUndefinedError} from \"../../error/ColumnTypeUndefinedError\";\nimport {getMetadataArgsStorage} from \"../../index\";\nimport {PrimaryColumnCannotBeNullableError} from \"../../error/PrimaryColumnCannotBeNullableError\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(type?: ColumnType, options?: ColumnOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * Primary columns also creates a PRIMARY KEY for this column in a db.\n */\nexport function PrimaryColumn(typeOrOptions?: ColumnType|ColumnOptions, options?: ColumnOptions): Function {\n    let type: ColumnType|undefined;\n    if (typeof typeOrOptions === \"string\") {\n        type = <ColumnType> typeOrOptions;\n    } else {\n        options = <ColumnOptions> typeOrOptions;\n    }\n    return function (object: Object, propertyName: string) {\n\n        // const reflectedType = ColumnTypes.typeToString((Reflect as any).getMetadata(\"design:type\", object, propertyName));\n\n        // if type is not given implicitly then try to guess it\n        if (!type) {\n            const reflectMetadataType = Reflect && (Reflect as any).getMetadata ? (Reflect as any).getMetadata(\"design:type\", object, propertyName) : undefined;\n            if (reflectMetadataType)\n                type = reflectMetadataType;\n        }\n\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions;\n\n        // check if there is no type in column options then set type from first function argument, or guessed one\n        if (!options.type && type)\n            options = Object.assign({ type: type } as ColumnOptions, options);\n\n        // if we still don't have a type then we need to give error to user that type is required\n        if (!options.type)\n            throw new ColumnTypeUndefinedError(object, propertyName);\n\n        // check if column is not nullable, because we cannot allow a primary key to be nullable\n        if (options.nullable)\n            throw new PrimaryColumnCannotBeNullableError(object, propertyName);\n\n        // implicitly set a primary to column options\n        options = Object.assign({ primary: true } as ColumnOptions, options);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n"],"sourceRoot":"../.."}