{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":";;AAAA;;GAEG;AACH;IAAA;IAiEA,CAAC;IA/DG,4EAA4E;IAC5E,wBAAwB;IACxB,4EAA4E;IAE5E;;;OAGG;IACI,8BAAkB,GAAzB,UAA0B,OAAY,EAAE,YAAkC;QACtE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvD,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;gBACtC,IAAM,gBAAgB,GAAQ;oBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;iBAC1B,CAAC;gBACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YAEpD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,gBAAgB,GAAQ;oBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;oBAC5B,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ;iBAC/B,CAAC;gBACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACpD,CAAC;QACL,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,4EAA4E;IAC5E,yBAAyB;IACzB,4EAA4E;IAE5E;;OAEG;IACY,8BAAkB,GAAjC,UAAkC,GAAW;QACzC,IAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,IAAM,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;QAC7C,IAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACzC,IAAM,IAAI,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC7E,IAAM,SAAS,GAAG,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/E,IAAA,oBAAoD,EAAnD,2BAAmB,EAAE,mBAAW,CAAoB;QACrD,IAAA,mCAAqD,EAApD,gBAAQ,EAAE,gBAAQ,CAAmC;QACtD,IAAA,2BAAqC,EAApC,YAAI,EAAE,YAAI,CAA2B;QAE5C,MAAM,CAAC;YACH,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;YACvC,QAAQ,EAAE,SAAS,IAAI,SAAS;SACnC,CAAC;IACN,CAAC;IAEL,kBAAC;AAAD,CAjEA,AAiEC,IAAA;AAjEY,kCAAW","file":"DriverUtils.js","sourcesContent":["/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const parsedUrl = this.parseConnectionUrl(options.url);\n            if (buildOptions && buildOptions.useSid) {\n                const urlDriverOptions: any = {\n                    type: options.type,\n                    host: parsedUrl.host,\n                    username: parsedUrl.username,\n                    password: parsedUrl.password,\n                    port: parsedUrl.port,\n                    sid: parsedUrl.database\n                };\n                return Object.assign(urlDriverOptions, options);\n\n            } else {\n                const urlDriverOptions: any = {\n                    type: options.type,\n                    host: parsedUrl.host,\n                    username: parsedUrl.username,\n                    password: parsedUrl.password,\n                    port: parsedUrl.port,\n                    database: parsedUrl.database\n                };\n                return Object.assign(urlDriverOptions, options);\n            }\n        }\n        return Object.assign({}, options);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        const afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        const [usernameAndPassword, hostAndPort] = base.split(\"@\");\n        const [username, password] = usernameAndPassword.split(\":\");\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            host: host,\n            username: username,\n            password: password,\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n\n}"],"sourceRoot":".."}